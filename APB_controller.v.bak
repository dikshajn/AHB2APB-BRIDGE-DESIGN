module APB_Controller (
  input hclk,hresetn,valid
  input[31:0] hwdata1,hwdata2,haddr1,haddr
  input hwritereg
  input[2:0] temp_selx,
  output reg penable,pwrite
  output[2:0]pselx
  output[31:0] paddr,pwdata,prdata
);


reg[2:0] ps,ns;

  //parameter
  parameter(
  ST_IDLE:3'b000
  ST_WWAIT:3'b001
  ST_WRITEP:3'b010
  ST_WENABLEP:3'b011
  ST_WRITE:3'b100
  ST_WENABLE:3'b101
  ST_READ:3'b110
  ST_RENABLE:3'b111	
)


  // present state logic , sequential
  always @(posedge hclk)
   if(!hrstn)
   ps<=1'b0;
   else
   ps<=ns;

  // next state logic , combinational
  always @(*)
   ns=ST_IDLE; //first state
   case(ps)
   ST_IDLE: if(valid==1 && hwrite==1)
             ns=ST_WWAIT;
           else if(valid && ~hwrite)
             ns=ST_WWAIT;
           else (valid)
             ns=ST_IDLE;

   ST_WWAIT: if(valid==1 )
             ns=ST_WRITEP;
           else (valid)
             ns=ST_WRITE;

   ST_WRITEP: ns=ST_WENABLEP;

   ST_WENABLEP: if(valid==1 && hwritereg==1)
             ns=ST_WRITEP;
           else if(~valid && hwritereg)
             ns=ST_WRITE;
           else (~hwritereg)
             ns=ST_READ;

    ST_WRITE: if(valid==1 )
             ns=ST_WENABLE;
           else(~valid )
             ns=ST_WENABLEP;
           

   ST_WENABLE: if(valid==1 && hwrite==1)
             ns=ST_WWAIT;
           else if(valid && ~hwrite)
             ns=ST_READ;
           else (valid)
             ns=ST_IDLE;

   ST_READ: ns=ST_RENABLE;
             
   ST_RENABLE: if(valid==1 && hwrite==1)
             ns=ST_WWAIT;
           else if(valid && ~hwrite)
             ns=ST_READ;
           else (valid)
             ns=ST_IDLE;

   end
endmodule

